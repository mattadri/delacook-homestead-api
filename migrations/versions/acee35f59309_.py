"""empty message

Revision ID: acee35f59309
Revises: 402abe0dc4be
Create Date: 2020-03-07 12:50:15.696640

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'acee35f59309'
down_revision = '402abe0dc4be'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('plants_lifespan_fk_fkey', 'plants', type_='foreignkey')
    op.drop_constraint('plants_type_fk_fkey', 'plants', type_='foreignkey')
    op.drop_constraint('plants_wood_type_fk_fkey', 'plants', type_='foreignkey')
    op.drop_constraint('plants_leaf_cycle_fk_fkey', 'plants', type_='foreignkey')
    op.drop_column('plants', 'wood_type_fk')
    op.drop_column('plants', 'leaf_cycle_fk')
    op.drop_column('plants', 'lifespan_fk')
    op.drop_column('plants', 'type_fk')

    op.drop_table('plantcloningnotes')
    op.drop_table('types')
    op.drop_table('plantlineagegenerations')
    op.drop_table('plantharvests')
    op.drop_table('plantingnotes')
    op.drop_table('plantgenerations')
    op.drop_table('plantclonings')
    op.drop_table('plantings')
    op.drop_table('lifespans')
    op.drop_table('woodtypes')
    op.drop_table('plantlineages')
    op.drop_table('leafcycles')
    op.drop_table('plantgenerationseedcollections')
    op.drop_table('plantnotes')
    op.drop_table('plantharvestnotes')
    op.drop_table('plantingphysicalsources')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('plants', sa.Column('type_fk', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('plants', sa.Column('lifespan_fk', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('plants', sa.Column('leaf_cycle_fk', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('plants', sa.Column('wood_type_fk', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('plants_leaf_cycle_fk_fkey', 'plants', 'leafcycles', ['leaf_cycle_fk'], ['id'])
    op.create_foreign_key('plants_wood_type_fk_fkey', 'plants', 'woodtypes', ['wood_type_fk'], ['id'])
    op.create_foreign_key('plants_type_fk_fkey', 'plants', 'types', ['type_fk'], ['id'])
    op.create_foreign_key('plants_lifespan_fk_fkey', 'plants', 'lifespans', ['lifespan_fk'], ['id'])
    op.create_table('plantharvestnotes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('plant_harvest_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('note_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_harvest_fk'], ['plantharvests.id'], name='plantharvestnotes_plant_harvest_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantharvestnotes_pkey')
    )
    op.create_table('plantnotes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('note_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_fk'], ['plants.id'], name='plantnotes_plant_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantnotes_pkey')
    )
    op.create_table('plantgenerationseedcollections',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_generation_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_seeds_harvested', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('total_seeds_harvested', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_seeds_packaged', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_generation_fk'], ['plantgenerations.id'], name='plantgenerationseedcollections_plant_generation_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantgenerationseedcollections_pkey')
    )
    op.create_table('leafcycles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('leafcycles_id_seq'::regclass)"), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('enum', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='leafcycles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('plantlineages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('plantlineages_id_seq'::regclass)"), nullable=False),
    sa.Column('plant_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('planting_physical_source_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_dead', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lineage_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date_lineage_started', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_fk'], ['plants.id'], name='plantlineages_plant_fk_fkey'),
    sa.ForeignKeyConstraint(['planting_physical_source_fk'], ['plantingphysicalsources.id'], name='plantlineages_planting_physical_source_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantlineages_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('woodtypes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('woodtypes_id_seq'::regclass)"), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('enum', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='woodtypes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('lifespans',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lifespans_id_seq'::regclass)"), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('enum', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='lifespans_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('plantings',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('plantings_id_seq'::regclass)"), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_generation_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('planting_physical_source_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('seeds_started', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_seeds_started', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('starting_medium', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('seeds_sprouted', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_first_seeds_sprouted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sprouts_planted', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_sprouts_planted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plants_survived', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_next_generation_seeds_collected', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_generation_fk'], ['plantgenerations.id'], name='plantings_plant_generation_fk_fkey'),
    sa.ForeignKeyConstraint(['planting_physical_source_fk'], ['plantingphysicalsources.id'], name='plantings_planting_physical_source_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantings_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('plantclonings',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('plantclonings_id_seq'::regclass)"), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_generation_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('planting_physical_source_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_cloned', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('number_cloned', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('number_rooted', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_first_plant_rooted', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('clones_planted', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_clones_planted', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('clones_survived', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_next_generation_seeds_collected', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('root_hormone_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('root_hormone_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rooting_medium', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_generation_fk'], ['plantgenerations.id'], name='plantclonings_plant_generation_fk_fkey'),
    sa.ForeignKeyConstraint(['planting_physical_source_fk'], ['plantingphysicalsources.id'], name='plantclonings_planting_physical_source_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantclonings_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('plantgenerations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('plantgenerations_id_seq'::regclass)"), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='plantgenerations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('plantingnotes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('planting_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('note_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['planting_fk'], ['plantings.id'], name='plantingnotes_planting_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantingnotes_pkey')
    )
    op.create_table('plantharvests',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_generation_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('finish_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('grams_harvested', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_generation_fk'], ['plantgenerations.id'], name='plantharvests_plant_generation_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantharvests_pkey')
    )
    op.create_table('plantlineagegenerations',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_lineage_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('plant_generation_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_origin', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('generation_slot', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plant_generation_fk'], ['plantgenerations.id'], name='plantlineagegenerations_plant_generation_fk_fkey'),
    sa.ForeignKeyConstraint(['plant_lineage_fk'], ['plantlineages.id'], name='plantlineagegenerations_plant_lineage_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantlineagegenerations_pkey')
    )
    op.create_table('types',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('enum', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='types_pkey')
    )
    op.create_table('plantcloningnotes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('plant_cloning_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('note_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plant_cloning_fk'], ['plantclonings.id'], name='plantcloningnotes_plant_cloning_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='plantcloningnotes_pkey')
    )
    op.create_table('plantingphysicalsources',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('enum', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='plantingphysicalsources_pkey')
    )
    # ### end Alembic commands ###
